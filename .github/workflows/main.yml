name: Terraform Validation and Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.4.6'
    
    - name: Terraform Format Check
      run: cd terraform && terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: cd terraform && terraform init
      continue-on-error: true

    - name: Terraform Validate
      run: cd terraform && terraform validate
      continue-on-error: true

  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: terraform-validation  # Ensure Terraform validation runs first

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image
      run: |
        # Define a unique image name using the GitHub run ID
        IMAGE_NAME="hello-world:${{ github.run_id }}"

        # Save the IMAGE_NAME to a file for later steps
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

        # Build the Docker image with the unique name
        docker build -t $IMAGE_NAME .

        # Run the container with the built image and map port 80
        docker run -d -p 80:80 $IMAGE_NAME

        # Wait for the container to start
        sleep 10  # You can increase this time if needed

        # Test if the website is accessible through curl
        curl -f http://localhost

    - name: Stop and remove the Docker container
      run: |
        # Stop the running container
        docker ps -q --filter "ancestor=$IMAGE_NAME" | xargs docker stop
        # Remove the stopped container
        docker ps -a -q --filter "ancestor=$IMAGE_NAME" | xargs docker rm
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
